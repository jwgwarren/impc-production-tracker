[
  {
    "name": "Admin Full Access",
    "description": "Admin can do all.",
    "target": "subject.isAdmin()",
    "condition": "true"
  },
  {
    "name": "Create new users",
    "description": "Admin and Manager can create new users.",
    "target": "action == 'CREATE_USER'",
    "condition": "subject.getRelatedRoles().contains('manager')"
  },
  {
    "name": "General permission to execute manager related tasks",
    "description": "General permission to execute manager related tasks",
    "target": "action == 'EXECUTE_MANAGER_TASKS'",
    "condition": "subject.getRelatedRoles().contains('manager')"
  },
  {
    "name": "Filter roles",
    "description": "Managers can create new users with equal roles or lower permissions.",
    "target": "action == 'FILTER_ROLE'",
    "condition": "subject.isAdmin() OR (subject.getRelatedRoles().contains('manager') AND {'manager', 'general'}.contains(resource.name))"
  },
  {
    "name": "Read Public plans",
    "description": "Permission to read public plans",
    "target": "action == 'READ_PLAN' AND resource.resourcePrivacy.name() == 'PUBLIC'",
    "condition": "true"
  },
  {
    "name": "Read Plans",
    "description": "Permission to read plans in same work unit",
    "target": "action == 'READ_PLAN' AND resource.resourcePrivacy.name() == 'RESTRICTED'",
    "condition": "subject.workUnit.id == resource.workUnit.id"
  },
  {
    "name": "Read Plans in the subject's work unit",
    "description": "Permission to read plans in same work unit",
    "target": "action == 'READ_PLAN'",
    "condition": "subject.workUnit.id == resource.workUnit.id"
  },
  {
    "name": "Admin can delete resources",
    "description": "Permission to delete any resource for admins",
    "target": "action == 'DELETE_RESOURCE'",
    "condition": "subject.role.name == 'admin'"
  },
  {
    "name": "Update a plan that is in the same subject's work unit",
    "description": "Permission to Update a plan",
    "target": "action == 'UPDATE_PLAN'",
    "condition": "subject.belongsToAnyWorkUnit(resource.workUnit)"
  },
  {
    "name": "Read public projects.",
    "description": "A project that is public can be read by anyone.",
    "target": "action == 'READ_PROJECT'",
    "condition": "resource.resourcePrivacy.name() == 'PUBLIC'"
  },
  {
    "name": "Read projects in related consortia.",
    "description": "A user can read a project that is related to a consortium where the user is a member of that consortium.",
    "target": "action == 'READ_PROJECT'",
    "condition": "subject.belongsToConsortia(resource.consortia)"
  },
  {
    "name": "Modify associated projects",
    "description": "A user can modify a project if they have plans associated with it.",
    "target": "action == 'UPDATE_PROJECT'",
    "condition": "subject.belongsToAnyWorkUnit(resource.getRelatedWorkUnits())"
  }

]